#!/usr/bin/perl -T -CSDAL

use warnings;
use strict;
use utf8;
use Encode;
use Stsbl::IServ::IO;
use IServ::Conf;
use IServ::DB;
use IServ::Locale;
use IServ::User;
use IServ::Tools;
use IServ::Valid;
use JSON;
use MIME::Lite;
use POSIX;
use sessauth;

POSIX::setlocale(POSIX::LC_CTYPE, $conf->{DefLang} . ".UTF-8");
POSIX::setlocale(POSIX::LC_MESSAGES, $conf->{DefLang} . ".UTF-8");
IServ::Locale::UseDefLang();

my $json = JSON->new->utf8->allow_nonref;

my $m_ip = qr/[\d.:]{1,64}/;
my $priv = "manage_promotions";

my $login_pwd = $ENV{PASSWORD} // $ENV{SESSPW};
my ($login_ip) = ($ENV{IP} // "") =~ /^($m_ip)$/;
my ($login_ip_fwd) = ($ENV{IPFWD} // "") =~ /^($m_ip)$/;

my %row;
$row{module} = "Course Group Management";
my $log_text;
my $cnt;
my %msg;

if (@ARGV < 1)
{
  print STDERR "Usage: actcoursepromotion LOGIN\n";
  print STDERR "Environment: ARG, PASSWORD, IP, IPWD\n";
  exit 1
}

my ($login_act) = @ARGV;

if (not defined $ENV{ARG})
{
  error "JSON data not found in environment."
}

my $data = decode "UTF-8", $ENV{ARG};

undef %ENV;

# untaint
$login_act = IServ::Valid::User $login_act;
$login_pwd = IServ::Valid::Passwd $login_pwd;

sessauth::login $login_act, $login_pwd, "actcoursepromotion" or die "sessauth login failed!";

error "need privilege $priv\n"
  unless IServ::DB::Do "SELECT 1 FROM users_priv
    WHERE (Act = ? AND Privilege = ?) OR EXISTS (SELECT 1 
    FROM role_privileges r WHERE Privilege = ? 
    AND EXISTS (SELECT 1 FROM user_roles u WHERE 
    u.Act = ? AND u.Role = r.Role)) LIMIT 1",
    $login_act, $priv, $priv, $login_act;

if ($data =~ /^(.*)$/)
{
  $data = $1;
} else
{
  error "Failed to untaint data!";
}

$IServ::DB::logname = IServ::Tools::pwname $login_act;
$IServ::DB::logip = $login_ip;
$IServ::DB::logipfwd = $login_ip_fwd;

# decode
my $actions = ${json}->decode($data);
my $rename = $actions->{rename};
my $delete = $actions->{delete};

$cnt = 0;
for (@$delete)
{
  my ($groupname, $owner_act) = IServ::DB::SelectRow "SELECT Name, Owner FROM groups WHERE Act = ?", $_;
  
  if (defined $owner_act)
  {
    $msg{$owner_act}{deleted}{$_} = $groupname;
  }

  print sprintf(_("Deleting group %s ..."), $groupname)."\n";
  IServ::User::GroupDel $_;
  $cnt++;
}

if (@$delete < 1)
{
  print _("No groups will deleted.")."\n";
} else
{
  if ($cnt == 1)
  { 
    $log_text = _("One group deleted");
} else
{
  $log_text = sprintf(_("%s groups deleted"), $cnt);
}

IServ::DB::Log $log_text, %row;
}

$cnt = 0;
for (keys %$rename)
{
  eval
  {
    my $old_name = $rename->{$_}->{oldName};
    my $new_name = $rename->{$_}->{newName};
    my $new_act = IServ::Tools::name2act $new_name;
  
    if (IServ::DB::Do "SELECT 1 FROM groups WHERE Act = ? AND Deleted IS NULL", $new_act)
    {
      die sprintf(_("Group %s can not renamed to %s: Account is already used."), $old_name, $new_name);
    }
 
    print sprintf(_("Deleting promotion request for group %s ..."), $old_name)."\n";
    IServ::DB::Do "DELETE FROM cgr_management_promotion_requests WHERE ActGrp = ?", $_;

    my $owner_act = IServ::DB::SelectVal "SELECT Owner FROM groups WHERE Act = ?", $_;

    if (defined $owner_act)
    {
      $msg{$owner_act}{renamed}{$_} = {old_name => $old_name, new_name => $new_name};
    }

    print sprintf(_("Renaming group %s to %s ..."), $old_name, $new_name)."\n";
  
    IServ::User::GroupAct $_, $new_act;
    IServ::User::GroupName $new_act, $new_name;

    $cnt++;
  };

  print sprintf(_("Error during renaming group %s: %s"), $rename->{$_}->{oldName}, $@)."\n" if $@;
}

if (keys %$rename < 1)
{
  print _("No groups will renamed.")."\n";
} else
{
  if ($cnt == 1)
  {
    $log_text = _("One group promoted");
  } else
  {
    $log_text = sprintf(_("%s groups promoted"), $cnt);
  }

  IServ::DB::Log $log_text, %row;
}

my $sender_name = IServ::DB::SelectVal "SELECT firstname || ' ' || lastname FROM users_name WHERE act = ?", $login_act;

for (keys %msg)
{
  my ($msg, $text, $part, $act);

  if (defined $msg{$_}{deleted} and keys %{ $msg{$_}{deleted} } > 0)
  {
    print sprintf(_("Send e-mail to %s to inform on deleted groups ..."), $_)."\n"; 
    
    $msg = MIME::Lite->new(
      From      => "$sender_name <$login_act\@".$conf->{Domain}.">",
      To        => "$_\@".$conf->{Domain},
      Subject   => encode('MIME-Header', _("Groups without promotion request deleted")),
      Type      => 'multipart/mixed',
    );

    $text = _("The following groups you own without promotion request were deleted:")."\n\n";

    $act = $_;
    for (values %{ $msg{$_}{deleted} })
    {
      $text .= "  * $_\n";
    }
    
    $text .= "\n--\n"._('*This e-mail was generated automatically*');

    $part = MIME::Lite->new(
      Type    => 'TEXT',
      Data    => encode('UTF-8', $text),
      Encoding => 'quoted-printable'
    );
    $part->attr('content-type.charset' => 'UTF-8');
    
    $msg->attach($part);

    $msg->send;
  }

  if (defined $msg{$_}{renamed} and keys %{ $msg{$_}{renamed} } > 0)
  {
    print sprintf(_("Send e-mail to %s to inform on renamed groups ..."), $_)."\n";
    
    $msg = MIME::Lite->new(
      From      => "$sender_name <$login_act\@".$conf->{Domain}.">",
      To        => "$_\@".$conf->{Domain},
      Subject   => encode('MIME-Header', _("Groups with promotion request renamed")),
      Type      => 'multipart/mixed',
    );

    $text = _("Your promotion requests were accepted and the following groups were renamed:")."\n";
    
    $act = $_;
    for (keys %{ $msg{$_}{renamed} })
    {
      $text .= "\n  * ".sprintf(_("%s was renamed to %s"), $msg{$act}{renamed}{$_}{old_name}, $msg{$act}{renamed}{$_}{new_name});
    }
    
    $text .= "\n\n--\n"._('*This e-mail was generated automatically*')
		    ;
    $part = MIME::Lite->new(
       Type    => 'TEXT',
       Data    => encode('UTF-8', $text),
       Encoding => 'quoted-printable'
    );
 
    $part->attr('content-type.charset' => 'UTF-8');

    $msg->attach($part);
 
    $msg->send;
  }
}

print "\n"._("Done.")."\n";
